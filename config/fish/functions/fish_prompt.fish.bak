function fish_prompt --description 'Write out the prompt'
    set -l last_status $status
    set -l normal (set_color normal)
    set -l status_color (set_color brgreen)
    set -l cwd_separator_color (set_color black)
    set -l cwd_bg_color (set_color -b black) (set_color --bold $fish_color_cwd)
    set -l vcs_color (set_color brpurple)
    set -l prompt_status ""
    set -l separator (set_color brblue) " "

    # Since we display the prompt on a new line allow the directory names to be longer.
    set -q fish_prompt_pwd_dir_length
    or set -lx fish_prompt_pwd_dir_length 0

    # Set prompt color based on mode
    set status_color (set_color --bold brblue)
    set -l suffix ""
    switch $fish_bind_mode
        case default
            set status_color (set_color --bold brblue)
            set suffix ""
        case insert
            set status_color (set_color --bold brgreen)
            set suffix "❯"
        case replace_one
            set status_color (set_color --bold brred)
            set suffix ""
        case visual
            set status_color (set_color brmagenta)
            set suffix ""
        case '*'
            set status_color (set_color red)
            set suffix ""
    end

    # Color the prompt differently when we're root
    if functions -q fish_is_root_user; and fish_is_root_user
        if set -q fish_color_cwd_root
            set cwd_color (set_color $fish_color_cwd_root)
        end
        set suffix '#'
    end

    # Color the prompt in red on error
    if test $last_status -ne 0
        set status_color (set_color $fish_color_error)
        set prompt_status $separator $status_color " [" $last_status "]"
    end

    set -l vcs_info (fish_vcs_prompt)
    if test -n "$vcs_info"
        set vcs_info $separator $vcs_info
    end

    echo -s $cwd_separator_color '' $cwd_bg_color ' ' (prompt_pwd) $vcs_color $vcs_info $prompt_status ' ' $normal $cwd_separator_color ''
    echo -n -s $status_color $suffix ' ' $normal
end
